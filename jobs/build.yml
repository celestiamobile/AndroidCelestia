jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'macos-latest'

  variables:
    outputFormat: ${{ parameters.outputFormat }}

  steps:
  - checkout: Celestia
    submodules: true
  - checkout: self
    submodules: true

  - task: CmdLine@2
    inputs:
      script: |
        brew install gettext
    displayName: 'Install Gettext'

  - script: |
      cd AndroidCelestia
      git cherry-pick origin/asset-pack-integration
    displayName: 'Cherry-Pick Asset Pack Integration'
    condition: eq( variables['outputFormat'], 'aab' )

  - task: android-manifest-version@1
    inputs:
      sourcePath: '$(system.defaultWorkingDirectory)/AndroidCelestia/app/src/main/AndroidManifest.xml'
      versionCodeOption: 'buildid'
      versionCode: '$(Build.BuildId)'
      versionCodeOffset: '140'
      versionName:
      printFile: true
    displayName: 'Update Bundle Version'

  - task: Gradle@2
    inputs:
      workingDirectory: '$(system.defaultWorkingDirectory)/AndroidCelestia'
      gradleWrapperFile: '$(system.defaultWorkingDirectory)/AndroidCelestia/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'assembleRelease'
    displayName: 'Build APK'
    condition: eq( variables['outputFormat'], 'apk' )

  - task: Gradle@2
    inputs:
      workingDirectory: '$(system.defaultWorkingDirectory)/AndroidCelestia'
      gradleWrapperFile: '$(system.defaultWorkingDirectory)/AndroidCelestia/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'bundleRelease'
    displayName: 'Build AAB'
    condition: eq( variables['outputFormat'], 'aab' )

  - task: AndroidSigning@2
    inputs:
      apkFiles: '$(system.defaultWorkingDirectory)/**/*.apk'
      jarsign: true
      jarsignerKeystoreFile: 'celestia.jks'
      jarsignerKeystorePassword: '$(JARSIGNER_KEYSTORE_PASSWORD)'
      jarsignerKeystoreAlias: 'celestia'
      jarsignerKeyPassword: '$(JARSIGNER_KEY_PASSWORD)'
      zipalign: true
    displayName: 'Sign APK'
    condition: eq( variables['outputFormat'], 'apk' )

  - task: DownloadSecureFile@1
    name: keyStoreFile
    displayName: 'Download KeyStore File'
    inputs:
      secureFile: 'celestia.jks'
    condition: eq( variables['outputFormat'], 'aab' )

  - script: |
      jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore $(keyStoreFile.secureFilePath) -storepass $(JARSIGNER_KEYSTORE_PASSWORD) -keypass $(JARSIGNER_KEY_PASSWORD) $(system.defaultworkingdirectory)/AndroidCelestia/app/build/outputs/bundle/release/*.aab celestia
    displayName: "Sign AAB"
    condition: eq( variables['outputFormat'], 'aab' )

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(system.defaultWorkingDirectory)'
      contents: '**/*.$(outputFormat)'
      targetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy APK/AAB'

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(system.defaultWorkingDirectory)/AndroidCelestia/app/build/intermediates/cmake/release/obj'
      contents: '**/*.so'
      targetFolder: '$(build.artifactStagingDirectory)'
    displayName: 'Copy Symbols'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(outputFormat)'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'

  - task: AppCenterDistribute@3
    inputs:
      serverEndpoint: 'AndroidCelestiaAppCenter'
      appSlug: 'CelestiaProject/Celestia-1'
      appFile: '$(build.artifactstagingdirectory)/**/*.$(outputFormat)'
      releaseNotesOption: 'input'
      releaseNotesInput: 'Internal testing only.'
      destinationType: 'groups'
      symbolsOption: 'Android'
      nativeLibrariesPath: '$(build.artifactStagingDirectory)/**/*.so'
    displayName: 'Publish APK/AAB to AppCenter'
