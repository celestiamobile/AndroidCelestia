jobs:
- job: Build
  displayName: 'Build'
  pool:
    vmImage: 'ubuntu-24.04'

  variables:
    outputFormat: ${{ parameters.outputFormat }}
    contentCommitHash: ${{ '7cf89b3deace6b18c1ac6eeb5be3338c34fe470e' }}

  steps:
  - checkout: Celestia
    fetchDepth: 0
  - checkout: CelestiaContent
    fetchDepth: 0
  - checkout: CelestiaLocalization
    fetchDepth: 0
  - checkout: self
    fetchDepth: 0

  - script: |
      sudo apt update
      sudo apt install -y gettext gperf imagemagick
    displayName: 'Install Dependencies'

  - script: |
      curl -sL https://sentry.io/get-cli/ | sh
    displayName: 'Install Sentry-CLI'

  - script: |
      cd Celestia
      git checkout origin/$(Build.SourceBranchName)
      cd ../CelestiaLocalization
      git checkout origin/$(Build.SourceBranchName)
    displayName: 'Checkout Branch'
    condition: ne( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd Celestia
      git checkout origin/$(System.PullRequest.TargetBranch)
      cd ../CelestiaLocalization
      git checkout origin/$(System.PullRequest.TargetBranch)
    displayName: 'Checkout Branch (PR)'
    condition: eq( variables['Build.Reason'], 'PullRequest' )

  - script: |
      cd CelestiaContent
      git checkout $(contentCommitHash)
    displayName: 'Checkout Content'

  - script: |
      sh $(System.DefaultWorkingDirectory)/AndroidCelestia/app/downsize_textures.sh
    displayName: 'Running imagemagick'

  - script: |
      sh $(System.DefaultWorkingDirectory)/AndroidCelestia/app/run_gperf.sh $(System.DefaultWorkingDirectory)/Celestia
    displayName: 'Running gperf'

  - script: |
      mkdir -p AndroidCelestia/dependencies
    displayName: 'Creating Directories for Third Party Dependencies'

  - task: UniversalPackages@0
    inputs:
      command: 'download'
      downloadDirectory: 'AndroidCelestia/dependencies'
      feedsToUse: 'internal'
      vstsFeed: '9f9dcde1-dcba-4537-8214-71c8a03b99a0/14bb1031-e6b2-40ac-b287-73e7fcb5900e'
      vstsFeedPackage: '8024e780-0af6-4980-8246-df6550e8d1b6'
      vstsPackageVersion: '0.0.22'
    displayName: 'Download Dependencies'

  - script: |
      TO_REPLACE="SENTRY-DSN"
      NEW_STRING=$(SENTRY-DSN)
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      BUNDLE_UUID=`uuidgen`
      FLAVOR_BUNDLE_UUID=`uuidgen`
      CELESTIA_BUNDLE_UUID=`uuidgen`
      CELESTIA_FOUNDATION_BUNDLE_UUID=`uuidgen`
      LINK_PREVIEW_BUNDLE_UUID=`uuidgen`
      ZIP_UTILS_BUNDLE_UUID=`uuidgen`
      PROGUARD_UUID=`uuidgen`

      TO_REPLACE="FLAVOR_BUNDLE_UUID"
      NEW_STRING=$FLAVOR_BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="CELESTIA_BUNDLE_UUID"
      NEW_STRING=$CELESTIA_BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="CELESTIA_FOUNDATION_BUNDLE_UUID"
      NEW_STRING=$CELESTIA_FOUNDATION_BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="LINK_PREVIEW_BUNDLE_UUID"
      NEW_STRING=$LINK_PREVIEW_BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="ZIP_UTILS_BUNDLE_UUID"
      NEW_STRING=$ZIP_UTILS_BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="BUNDLE_UUID"
      NEW_STRING=$BUNDLE_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      TO_REPLACE="PROGUARD_UUID"
      NEW_STRING=$PROGUARD_UUID
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      sed -ie "s#${TO_REPLACE}#${NEW_STRING}#g" app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt

      echo "##vso[task.setvariable variable=BundleUuid]$BUNDLE_UUID"
      echo "##vso[task.setvariable variable=FlavorBundleUuid]$FLAVOR_BUNDLE_UUID"
      echo "##vso[task.setvariable variable=CelestiaBundleUuid]$CELESTIA_BUNDLE_UUID"
      echo "##vso[task.setvariable variable=CelestiaFoundationBundleUuid]$CELESTIA_FOUNDATION_BUNDLE_UUID"
      echo "##vso[task.setvariable variable=LinkPreviewBundleUuid]$LINK_PREVIEW_BUNDLE_UUID"
      echo "##vso[task.setvariable variable=ZipUtilsBundleUuid]$ZIP_UTILS_BUNDLE_UUID"
      echo "##vso[task.setvariable variable=ProguardUuid]$PROGUARD_UUID"

      echo "New Content:"
      cat app/src/play/java/space/celestia/mobilecelestia/Flavor.kt
      cat app/src/sideload/java/space/celestia/mobilecelestia/Flavor.kt
    workingDirectory: '$(System.DefaultWorkingDirectory)/AndroidCelestia'
    displayName: 'Replace Sentry Placeholders'

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '21'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
    displayName: 'Install Java 21'

  - task: Gradle@3
    inputs:
      workingDirectory: '$(system.defaultWorkingDirectory)/AndroidCelestia'
      gradleWrapperFile: '$(system.defaultWorkingDirectory)/AndroidCelestia/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'assembleSideloadRelease'
    displayName: 'Build APK'
    condition: eq( variables['outputFormat'], 'apk' )

  - task: Gradle@3
    inputs:
      workingDirectory: '$(system.defaultWorkingDirectory)/AndroidCelestia'
      gradleWrapperFile: '$(system.defaultWorkingDirectory)/AndroidCelestia/gradlew'
      gradleOptions: '-Xmx3072m'
      publishJUnitResults: false
      testResultsFiles: '**/TEST-*.xml'
      tasks: 'bundlePlayRelease'
    displayName: 'Build AAB'
    condition: eq( variables['outputFormat'], 'aab' )

  - task: AndroidSigning@3
    inputs:
      apkFiles: '$(system.defaultWorkingDirectory)/**/*.apk'
      apksign: true
      apksignerKeystoreFile: 'celestia.jks'
      apksignerKeystorePassword: '$(JARSIGNER_KEYSTORE_PASSWORD)'
      apksignerKeystoreAlias: 'celestia'
      apksignerKeyPassword: '$(JARSIGNER_KEY_PASSWORD)'
      zipalign: true
    displayName: 'Sign APK'
    condition: eq( variables['outputFormat'], 'apk' )

  - task: DownloadSecureFile@1
    name: keyStoreFile
    displayName: 'Download KeyStore File'
    inputs:
      secureFile: 'celestia.jks'
    condition: eq( variables['outputFormat'], 'aab' )

  - script: |
      jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore $(keyStoreFile.secureFilePath) -storepass $(JARSIGNER_KEYSTORE_PASSWORD) -keypass $(JARSIGNER_KEY_PASSWORD) $(system.defaultworkingdirectory)/AndroidCelestia/app/build/outputs/bundle/playRelease/*.aab celestia
    displayName: "Sign AAB"
    condition: eq( variables['outputFormat'], 'aab' )

  - script: |
      rm -rf $(system.defaultworkingdirectory)/AndroidCelestia/app/build/intermediates/intermediary_bundle/*
    displayName: 'Remove Redundant AAB'
    condition: eq( variables['outputFormat'], 'aab' )

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(system.defaultWorkingDirectory)'
      contents: '**/*.$(outputFormat)'
      targetFolder: '$(build.artifactStagingDirectory)'
      flattenFolders: true
    displayName: 'Copy APK/AAB'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: '$(outputFormat)'
      publishLocation: 'Container'
    displayName: 'Publish Build Artifacts'

  - script: |
      echo "##vso[task.setvariable variable=Flavor]sideload"
      echo "##vso[task.setvariable variable=FlavorTask]sideloadRelease"
    displayName: 'Set Variables (Sideload)'
    condition: eq( variables['outputFormat'], 'apk' )

  - script: |
      echo "##vso[task.setvariable variable=Flavor]play"
      echo "##vso[task.setvariable variable=FlavorTask]playRelease"
    displayName: 'Set Variables (Play)'
    condition: eq( variables['outputFormat'], 'aab' )

  - script: |
      export SENTRY_ORG=celestia-vs
      export SENTRY_PROJECT=android
      export SENTRY_AUTH_TOKEN=$(SENTRY_AUTH_TOKEN)
      export VERSION_CODE=`grep versionCode app/src/main/AndroidManifest.xml | cut -d\" -f2`
      export VERSION_NAME=`grep versionName app/src/main/AndroidManifest.xml | cut -d\" -f2`
      mkdir bundle

      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(BundleUuid) app/src/main/java
      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(FlavorBundleUuid) app/src/$(Flavor)/java
      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(CelestiaBundleUuid) Celestia/src/main/java
      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(CelestiaFoundationBundleUuid) CelestiaFoundation/src/main/java
      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(LinkPreviewBundleUuid) LinkPreview/src/main/java
      sentry-cli debug-files bundle-jvm --output bundle --debug-id $(ZipUtilsBundleUuid) ZipUtils/src/main/java
      sentry-cli debug-files upload --type jvm bundle
      sentry-cli upload-proguard --uuid $(ProguardUuid) app/build/outputs/mapping/$(FlavorTask)/mapping.txt --app-id space.celestia.mobilecelestia --version $VERSION_NAME --version-code $VERSION_CODE
      sentry-cli debug-files upload --include-sources Celestia/build/intermediates/cxx/RelWithDebInfo/
      sentry-cli debug-files upload --include-sources ZipUtils/build/intermediates/cxx/RelWithDebInfo/

      mkdir symbols
      cp -r Celestia/build/intermediates/cxx/RelWithDebInfo/**/obj/* symbols
      cp -r ZipUtils/build/intermediates/cxx/RelWithDebInfo/**/obj/* symbols

      mkdir mapping
      cp app/build/outputs/mapping/$(FlavorTask)/mapping.txt mapping
    workingDirectory: '$(System.DefaultWorkingDirectory)/AndroidCelestia'
    displayName: 'Upload Symbols'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/AndroidCelestia/symbols'
      ArtifactName: '$(outputFormat)-symbols'
      publishLocation: 'Container'
    displayName: 'Publish Symbols'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/AndroidCelestia/mapping/mapping.txt'
      ArtifactName: '$(outputFormat)-mapping'
      publishLocation: 'Container'
    displayName: 'Publish Mapping'
