/*
 * build.gradle
 *
 * Copyright (C) 2023-present, Celestia Development Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.compose" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlin_version"
}

android {
    compileSdkVersion constants.compileSdkVersion
    buildToolsVersion constants.buildToolsVersion
    ndkVersion constants.ndkVersion

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    defaultConfig {
        applicationId "space.celestia.mobilecelestia"
        minSdkVersion constants.minSdkVersion
        targetSdkVersion constants.targetSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ndk {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = '21'
    }

    tasks.register('copyLocalizedFiles', Exec) {
        println "Copying localized files"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["copy_localized_files.sh"]
    }

    tasks.register('copyGeneralData', Exec) {
        println "Copying general data"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["copy_general_data.sh"]
    }

    tasks.register('convertPO', Exec) {
        println "Converting PO"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["convert_po.sh"]
    }
    namespace 'space.celestia.mobilecelestia'

    copyGeneralData.mustRunAfter copyLocalizedFiles
    convertPO.mustRunAfter copyGeneralData
    preBuild.dependsOn copyLocalizedFiles
    preBuild.dependsOn copyGeneralData
    preBuild.dependsOn convertPO

    flavorDimensions = ["distribution"]
    productFlavors {
        sideload {
            isDefault = true
            dimension "distribution"
            assetPacks = []
        }
        unofficial {
            dimension "distribution"
            assetPacks = []
        }
        play {
            dimension "distribution"
            assetPacks = [":base_assets"]
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$core_appcompat_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation 'androidx.activity:activity-ktx:1.10.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation "androidx.drawerlayout:drawerlayout:1.2.0"

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.8.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"
    implementation 'androidx.fragment:fragment-ktx:1.8.6'

    implementation "com.google.android.material:material:$material_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:retrofit:2.11.0"
    implementation "com.squareup.retrofit2:converter-gson:2.11.0"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    implementation "androidx.webkit:webkit:1.12.1"

    implementation project(path: ':LinkPreview')
    implementation project(path: ':Celestia')
    implementation project(path: ':CelestiaFoundation')

    def sentry_version = '7.20.1'
    playImplementation "io.sentry:sentry-android:$sentry_version"
    sideloadImplementation "io.sentry:sentry-android:$sentry_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation "androidx.hilt:hilt-navigation-compose:1.2.0"
    implementation "androidx.navigation:navigation-compose:2.8.7"
    implementation "androidx.navigation:navigation-runtime-ktx:2.8.7"

    def composeBom = platform('androidx.compose:compose-bom:2025.02.00')
    implementation composeBom
    androidTestImplementation composeBom

    implementation "androidx.compose.ui:ui"
    implementation "androidx.compose.material3:material3-android"

    playImplementation "com.android.billingclient:billing-ktx:7.1.1"

    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"
}
