/*
 * build.gradle
 *
 * Copyright (C) 2023-present, Celestia Development Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 */

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.org.jetbrains.kotlin.android)
    alias(libs.plugins.hilt)
    alias(libs.plugins.org.jetbrains.kotlin.kapt)
    alias(libs.plugins.compose.compiler)
}

android {
    compileSdkVersion Integer.parseInt(libs.versions.compile.sdk.get())
    buildToolsVersion libs.versions.build.tools.get()

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    buildFeatures {
        compose true
        buildConfig true
    }

    defaultConfig {
        applicationId "space.celestia.mobilecelestia"
        minSdkVersion Integer.parseInt(libs.versions.min.sdk.get())
        targetSdkVersion Integer.parseInt(libs.versions.target.sdk.get())

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    kotlinOptions {
        jvmTarget = '21'
    }

    tasks.register('copyLocalizedFiles', Exec) {
        println "Copying localized files"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["copy_localized_files.sh"]
    }

    tasks.register('copyGeneralData', Exec) {
        println "Copying general data"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["copy_general_data.sh"]
    }

    tasks.register('convertPO', Exec) {
        println "Converting PO"
        workingDir projectDir
        executable = '/bin/sh'
        args = ["convert_po.sh"]
    }
    namespace 'space.celestia.mobilecelestia'

    copyGeneralData.mustRunAfter copyLocalizedFiles
    convertPO.mustRunAfter copyGeneralData
    preBuild.dependsOn copyLocalizedFiles
    preBuild.dependsOn copyGeneralData
    preBuild.dependsOn convertPO

    flavorDimensions = ["distribution"]
    productFlavors {
        sideload {
            isDefault = true
            dimension "distribution"
            assetPacks = []
        }
        unofficial {
            dimension "distribution"
            assetPacks = []
        }
        play {
            dimension "distribution"
            assetPacks = [":base_assets"]
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlin.stdlib
    implementation libs.kotlin.stdlib
    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.recyclerview
    implementation libs.androidx.drawerlayout

    implementation libs.kotlinx.coroutines.android
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.runtime.compose
    implementation libs.androidx.fragment.ktx

    implementation libs.material
    implementation libs.gson
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.okhttp

    implementation libs.androidx.webkit

    implementation project(path: ':LinkPreview')
    implementation project(path: ':Celestia')
    implementation project(path: ':CelestiaFoundation')

    playImplementation libs.sentry.android
    sideloadImplementation libs.sentry.android

    implementation libs.hilt.android
    kapt libs.hilt.compiler
    implementation libs.androidx.hilt.navigation.compose

    def composeBom = platform(libs.androidx.compose.bom)
    implementation composeBom
    androidTestImplementation composeBom

    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.material3

    playImplementation libs.billing.ktx

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}
